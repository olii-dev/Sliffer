import SwiftUI
import CoreHaptics

struct Item: Identifiable {
    var id = UUID()
    var name: String
    var description: String
    var link: String?
    var category: String
    var isInstalled: Bool = false

struct ContentView: View {
    @ObservedObject var itemStore = ItemStore()
    @State private var searchText = ""
    @Environment(\.presentationMode) var presentationMode
    @Environment(\.horizontalSizeClass) var horizontalSizeClass
    @Environment(\.verticalSizeClass) var verticalSizeClass
    
    @State private var showFootnotes = false
    @AppStorage("isDarkModeOn") private var isDarkModeOn: Bool = false
    @State private var selectedBackgroundColor: Color = .white
    @State private var isHapticTouchEnabled: Bool = false
    
    @State private var selectedItem: Item? = nil
    @AppStorage("hasOnboarded") private var hasOnboarded: Bool = false
    
    func generateHapticFeedback() {
        if isHapticTouchEnabled {
            let generator = UIImpactFeedbackGenerator(style: .heavy)
            generator.impactOccurred()
        }
    }
    
    var colorScheme: ColorScheme {
        isDarkModeOn ? .dark : .light
    }
    
    var filteredItems: [Item] {
        if searchText.isEmpty {
            return Array(itemStore.items.prefix(8))
        } else {
            return itemStore.items.filter { item in
                item.name.localizedCaseInsensitiveContains(searchText)
            }
        }
    }
    
    var installedItems: [Item] {
        itemStore.items.filter { $0.isInstalled }
    }
    
    var categories: [String] {
        let uniqueCategories = Set(itemStore.items.map { $0.category })
        return Array(uniqueCategories)
    }
    
    func installShortcut(item: Item) {
      
        if let index = itemStore.items.firstIndex(where: { $0.id == item.id }) {
            itemStore.items[index].isInstalled.toggle()
        }
    }
    
    var body: some View {
        TabView {
            NavigationView {
                List(filteredItems) { item in
                    NavigationLink(destination: ItemDetailView(item: item)) {
                        HStack {
                            VStack(alignment: .leading, spacing: 4) {
                                Text(item.name)
                                    .font(.headline)
                                    .foregroundColor(.primary)
                                    .lineLimit(2)
                                Text(item.description)
                                    .font(.subheadline)
                                    .foregroundColor(.secondary)
                                    .lineLimit(3)
                            }
                            Spacer()
                            if let link = item.link {
                                Button(action: {
                                    if let link = item.link, let url = URL(string: link) {
                                        UIApplication.shared.open(url)
                                        generateHapticFeedback()
                                        installShortcut(item: item)
                                    }
                                }) {
                                    Text("GET")
                                        .font(.headline)
                                        .foregroundColor(.white)
                                        .padding(.horizontal, 10)
                                        .padding(.vertical, 5)
                                        .background(RoundedRectangle(cornerRadius: 10).fill(Color.blue))
                                }
                            }
                        }
                        .padding(.vertical, 8)
                    }
                }
                .listStyle(PlainListStyle())
                .navigationBarTitle("‚òÖ Sliffer - Featured")
                VStack {
                    if showFootnotes {
                        Text("Sliffer 1.4.2 Beta - By olii, credit to Sven")
                            .font(.footnote)
                            .foregroundColor(.gray)
                            .padding(.bottom, 2)
                        Text("iOS Version: \(UIDevice.current.systemVersion)")
                            .font(.footnote)
                            .foregroundColor(.gray)
                    }
                }
                .padding(.bottom, 16)
                .onAppear {
                    showFootnotes = true
                }
            }
            .tabItem {
                Text("Home")
                Image(systemName: "house.fill")
            }
            .onAppear {
                generateHapticFeedback()
            }
            
            NavigationView {
                List {
                    SearchBar(text: $searchText, placeholder: "Search Shortcuts...")
                    
                    ForEach(filteredItems) { item in
                        NavigationLink(destination: ItemDetailView(item: item)) {
                            Text(item.name)
                        }
                    }
                }
                .listStyle(PlainListStyle())
                .navigationBarTitle("üîç Search")
            }
            .tabItem {
                Text("Search")
                Image(systemName: "magnifyingglass")
                    .onAppear {
                        generateHapticFeedback()
                    }
            }
            
            NavigationView {
                CategoryListView(categories: categories, items: itemStore.items)
            }
            .tabItem {
                Text("Explore")
                Image(systemName: "binoculars.fill")
                    .onAppear {
                        generateHapticFeedback()
                    }
            }
            
            NavigationView {
                SettingsView(isDarkModeOn: $isDarkModeOn, selectedBackgroundColor: $selectedBackgroundColor, isHapticTouchEnabled: $isHapticTouchEnabled)
            }
            .tabItem {
                Text("Settings")
                Image(systemName: "gear")
            }
            .onAppear {
                generateHapticFeedback()
            }
        }
        .preferredColorScheme(colorScheme)
        .background(selectedBackgroundColor.edgesIgnoringSafeArea(.all))
    }
}
        
        struct SearchBar: View {
            @Binding var text: String
            var placeholder: String
            
            var body: some View {
                HStack {
                    Image(systemName: "magnifyingglass")
                    TextField(placeholder, text: $text)
                        .foregroundColor(.primary)
                    if !text.isEmpty {
                        Button(action: {
                            self.text = ""
                        }) {
                            Image(systemName: "xmark.circle.fill")
                                .foregroundColor(.primary)
                        }
                    }
                }
                .padding(.horizontal)
                .frame(height: 40)
                .background(Color(.systemGray6))
                .cornerRadius(10)
            }
        }
        
        struct CategoryListView: View {
            var categories: [String]
            var items: [Item]
            
            var body: some View {
                List(categories, id: \.self) { category in
                    NavigationLink(destination: CategoryDetailView(category: category, items: items)) {
                        Text(category)
                    }
                }
                .listStyle(GroupedListStyle())
                .navigationBarTitle("üìã Explore - Categories")
            }
        }
        
        struct CategoryDetailView: View {
            var category: String
            var items: [Item]
            
            var body: some View {
                List(items.filter { $0.category == category }) { item in
                    NavigationLink(destination: ItemDetailView(item: item)) {
                        HStack {
                            VStack(alignment: .leading, spacing: 4) {
                                Text(item.name)
                                    .font(.headline)
                                    .foregroundColor(.primary)
                                    .lineLimit(2)
                                Text(item.description)
                                    .font(.subheadline)
                                    .foregroundColor(.secondary)
                                    .lineLimit(3)
                            }
                            Spacer()
                            if let link = item.link {
                                Button(action: {
                                    UIApplication.shared.open(URL(string: link)!)
                                }) {
                                    Text("GET")
                                        .font(.subheadline)
                                        .foregroundColor(.white)
                                        .padding(.horizontal, 10)
                                        .padding(.vertical, 6)
                                        .background(RoundedRectangle(cornerRadius: 10).fill(Color.blue))
                                }
                                .padding(.trailing, 10)
                            }
                        }
                        .padding(.vertical, 8)
                    }
                }
                .listStyle(GroupedListStyle())
                .navigationBarTitle(category)
            }
        }
        
        struct InstalledItemsView: View {
            @Binding var installedItem: Item?
            var installedItems: [Item]
            
            var body: some View {
                if let item = installedItem {
                    ItemDetailView(item: item)
                } else {
                    List(installedItems) { item in
                        NavigationLink(destination: ItemDetailView(item: item)) {
                            HStack {
                                Text(item.name)
                            }
                        }
                    }
                }
            }
        }
        
        
        struct SettingsView: View {
            @Binding var isDarkModeOn: Bool
            @Binding var selectedBackgroundColor: Color
            @Binding var isHapticTouchEnabled: Bool
            
            var iosVersion: String {
                UIDevice.current.systemVersion
            }
            
            var body: some View {
                Form {
                    Section(header: Text("Appearance")) {
                        Toggle("Dark Mode", isOn: $isDarkModeOn)
                        ColorPicker("Background Color (Coming soon)", selection: $selectedBackgroundColor)
                    }
                    
                    Section(header: Text("Touch Feedback")) {
                        Toggle("Haptic Touch", isOn: $isHapticTouchEnabled)
                    }
                    
                    Section(header: Text("App Information")) {
                        Text("Version: 1.4.2")
                        Text("By olii, credit to Sven")
                        Text("iOS Version: \(iosVersion)")
                    }
                }
                .navigationBarTitle("‚öô Settings")
            }
}
